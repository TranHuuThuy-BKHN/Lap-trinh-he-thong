EMU8086 GENERATED LISTING. MACHINE CODE <- SOURCE.
 
enter_number.exe -- emu8086 assembler version: 4.08  
 
[ 11/9/2019  --  11:18:26 AM ] 
 
===================================================================================================
[LINE]     LOC: MACHINE CODE                          SOURCE
===================================================================================================
 
[   1]        :                                       .model small
[   2]        :                                       ;.386
[   3]        :                                       
[   4]        :                                       .stack 100h
[   5]        :                                       
[   6]        :                                       .data
[   7]    0100: 45 6E 74 65 72 20 79 6F 75 72 20 6E   meg db 'Enter your number = $'
                75 6D 62 65 72 20 3D 20 24          
[   8]    0115: 0A 0D 4E 75 6D 62 65 72 3A 24         meg_print db 10, 13, 'Number :$'
[   9]        :                                       
[  10]        :                                       
[  11]        :                                       .code
[  12]        :                                       
[  13]    0120:                                       main proc
[  14]        :                                       
[  15]    0120: B8 10 00                              mov ax, @data
[  16]    0123: 8E D8                                 mov ds, ax
[  17]        :                                       
[  18]        :                                       ;hien thi thong bao nhap so
[  19]    0125: BA 00 00                              mov dx, offset meg
[  20]    0128: B4 09                                 mov ah, 09h
[  21]    012A: CD 21                                 int 21h
[  22]        :                                       
[  23]    012C: 33 C9                                 xor cx, cx
[  24]    012E: 6A 00                                 push 0
[  25]        :                                       ;nhap gia tri so cho toi khi nhan enter
[  26]    0130:                                       input:
[  27]    0130: B4 00                                 mov ah, 0h
[  28]    0132: CD 16                                 int 16h
[  29]        :                                       
[  30]    0134: 3C 0D                                 cmp al, 13
[  31]    0136: 74 1E                                 jz next
[  32]        :                                       
[  33]    0138: 3C 30                                 cmp al, 30h
[  34]    013A: 72 F4                                 JB input
[  35]        :                                       
[  36]    013C: 3C 39                                 cmp al, 39h
[  37]    013E: 77 F0                                 JA input
[  38]        :                                       
[  39]    0140: 33 D2                                 xor dx, dx
[  40]    0142: 8A D0                                 mov dl, al
[  41]    0144: B4 02                                 mov ah, 02h
[  42]    0146: CD 21                                 int 21h
[  43]        :                                       
[  44]    0148: 83 F2 30                              xor dx, 30h
[  45]        :                                       
[  46]    014B: 58                                    pop ax
[  47]    014C: B7 0A                                 mov bh, 10
[  48]    014E: F6 E7                                 mul bh
[  49]    0150: 03 C2                                 add ax, dx
[  50]    0152: 50                                    push ax
[  51]        :                                       
[  52]    0153: 41                                    inc cx
[  53]    0154: EB DA                                 jmp input
[  54]        :                                       
[  55]        :                                       
[  56]    0156: 58                                    next:pop ax
[  57]        :                                       
[  58]        :                                       
[  59]        :                                       ;day cac chu so vao stack
[  60]    0157: 33 F6                                 xor si, si
[  61]    0159:                                       push_stack:
[  62]    0159: B7 0A                                 mov bh, 10
[  63]    015B: F6 F7                                 div bh
[  64]        :                                       
[  65]    015D: 33 DB                                 xor bx, bx
[  66]    015F: 8A DC                                 mov bl, ah
[  67]    0161: 25 FF 00                              and ax, 00FFh
[  68]        :                                       
[  69]    0164: 53                                    push bx
[  70]    0165: 46                                    inc si
[  71]    0166: E2 F1                                 loop push_stack
[  72]        :                                       
[  73]        :                                       ;lay lai so chua so
[  74]    0168: 8B CE                                 mov cx, si
[  75]        :                                       
[  76]    016A: BA 15 00                              mov dx, offset meg_print
[  77]    016D: B4 09                                 mov ah, 09h
[  78]    016F: CD 21                                 int 21h
[  79]        :                                       
[  80]    0171:                                       print:
[  81]    0171: 5A                                    pop dx
[  82]    0172: 83 F2 30                              xor dx, 30h
[  83]        :                                       
[  84]    0175: B4 02                                 mov ah, 02h
[  85]    0177: CD 21                                 int 21h
[  86]    0179: E2 F6                                 loop print
[  87]        :                                       
[  88]        :                                       
[  89]    017B: 58                                    pop ax
[  90]        :                                       
[  91]    017C: B8 00 4C CD 21                        .exit
[  92]        :                                       
[  93]        :                                       main endp
[  94]        :                                       
[  95]        :                                       end main
[  96]        :                                       
 
===================================================================================================
 
EXE HEADER - bytes from 0000 to 01FF inclusive.

0000: 4D      -   exe signature (M)
0001: 5A      -   exe signature (Z)
0002: 81      -   bytes on last page (l.byte)
0003: 01      -   bytes on last page (h.byte)
0004: 02      -   512 byte pages in file (l.byte)
0005: 00      -   512 byte pages in file (h.byte)
0006: 01      -   relocations (l.byte)
0007: 00      -   relocations (h.byte)
0008: 20      -   paragraphs in header (l.byte)
0009: 00      -   paragraphs in header (h.byte)
000A: 00      -   minimum memory (l.byte)
000B: 00      -   minimum memory (h.byte)
000C: FF      -   maximum memory (l.byte)
000D: FF      -   maximum memory (h.byte)
000E: 00      -   SS - stack segment (l.byte)
000F: 00      -   SS - stack segment (h.byte)
0010: 00      -   SP - stack pointer (l.byte)
0011: 01      -   SP - stack pointer (h.byte)
0012: B8      -   check sum (l.byte)
0013: BC      -   check sum (h.byte)
0014: 00      -   IP - instruction pointer (l.byte)
0015: 00      -   IP - instruction pointer (h.byte)
0016: 12      -   CS - code segment (l.byte)
0017: 00      -   CS - code segment (h.byte)
0018: 1E      -   relocation table adress (l.byte)
0019: 00      -   relocation table adress (h.byte)
001A: 00      -   overlay number (l.byte)
001B: 00      -   overlay number (h.byte)
001C: 01      -   signature (l.byte)
001D: 00      -   signature (h.byte)
001E: 01      -   relocation table - offset inside segment (l.byte)
001F: 00      -   relocation table - offset inside segment (h.byte)
0020: 12      -   relocation table - segment anchor (l.byte)
0021: 00      -   relocation table - segment anchor (h.byte)
0022 to 01FF  -   reserved relocation area  (00) 




===================================================================================================
