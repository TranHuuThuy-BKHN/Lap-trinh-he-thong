EMU8086 GENERATED LISTING. MACHINE CODE <- SOURCE.
 
mycode.exe -- emu8086 assembler version: 4.08  
 
[ 11/8/2019  --  7:44:38 PM ] 
 
===================================================================================================
[LINE]     LOC: MACHINE CODE                          SOURCE
===================================================================================================
 
[   1]        :                                       .model small
[   2]        :                                       
[   3]        :                                       .stack 100h
[   4]        :                                       
[   5]        :                                       .data
[   6]    0100: 44 01 30 00 DD 03 D2 04 D2 04 D2 04   number dw 324,48, 989, 30 dup(1234)
                D2 04 D2 04 D2 04 D2 04 D2 04 D2 04 
                D2 04 D2 04 D2 04 D2 04 D2 04 D2 04 
                D2 04 D2 04 D2 04 D2 04 D2 04 D2 04 
                D2 04 D2 04 D2 04 D2 04 D2 04 D2 04 
                D2 04 D2 04 D2 04                   
[   7]    0142:                                       len = ($ - number)/2
[   8]        :                                       
[   9]        :                                       
[  10]        :                                       .code
[  11]    0150:                                       main proc
[  12]    0150: B8 10 00                              mov ax, @data
[  13]    0153: 8E D8                                 mov ds, ax
[  14]        :                                       
[  15]        :                                       ;so phan tu can hien thi cua mang
[  16]    0155: B9 21 00                              mov cx, len
[  17]        :                                       ;gan si bang zero
[  18]    0158: 33 F6                                 xor si, si
[  19]        :                                       
[  20]    015A:                                       Lap: ;chuyen gia tri vao thanh ghi ax
[  21]    015A: 8B 04                                 mov ax, number[si]
[  22]    015C: 83 C6 02                              add si, 2
[  23]        :                                       
[  24]        :                                       ;day so vong lap vao stack
[  25]    015F: 51                                    push cx
[  26]    0160: 33 C9                                 xor cx, cx
[  27]    0162: 33 DB                                 xor bx, bx
[  28]        :                                       
[  29]    0164:                                       comp:
[  30]    0164: B7 0A                                 mov bh,10
[  31]    0166: F6 F7                                 div bh
[  32]        :                                       
[  33]    0168: 8A D8                                 mov bl, al
[  34]    016A: 32 C0                                 xor al, al
[  35]        :                                       
[  36]        :                                       ;so du o AH, day no vao stack
[  37]    016C: 50                                    push ax
[  38]    016D: 41                                    inc cx
[  39]        :                                       
[  40]        :                                       ;xoa trang AH
[  41]    016E: 32 E4                                 xor ah, ah
[  42]    0170: 8A C3                                 mov al, bl
[  43]        :                                       
[  44]        :                                       ;thiet lap co de jump, neu la zero thi ko jump
[  45]    0172: 33 DB                                 xor bx, bx
[  46]    0174: 0B D8                                 or bx, ax
[  47]        :                                       
[  48]    0176: 75 EC                                 jne comp
[  49]        :                                       
[  50]        :                                       
[  51]    0178:                                       write:
[  52]    0178: 5A                                    pop dx
[  53]    0179: D1 C2 D1 C2 D1 C2 D1 C2 D1 C2 D1 C2   rol dx, 8
                D1 C2 D1 C2                         
[  54]        :                                       
[  55]    0189: 83 CA 30                              or dx, 30h
[  56]    018C: B4 02                                 mov ah, 02h
[  57]    018E: CD 21                                 int 21h
[  58]        :                                       
[  59]    0190: E2 E6                                 loop write
[  60]        :                                       
[  61]    0192: 59                                    pop cx
[  62]        :                                       
[  63]        :                                       ;xuong dong hien thi so tiep theo cua mang
[  64]    0193: BA 0A 00                              mov dx, 10
[  65]    0196: B4 02                                 mov ah, 02h
[  66]    0198: CD 21                                 int 21h
[  67]        :                                       
[  68]    019A: BA 0D 00                              mov dx, 13
[  69]    019D: B4 02                                 mov ah, 02h
[  70]    019F: CD 21                                 int 21h
[  71]        :                                       
[  72]        :                                       
[  73]    01A1: E2 B7                                 loop Lap
[  74]        :                                       
[  75]    01A3: B8 00 4C CD 21                        .exit
[  76]        :                                       
[  77]        :                                       
[  78]        :                                       main endp
[  79]        :                                       end main
[  80]        :                                       
 
===================================================================================================
 
EXE HEADER - bytes from 0000 to 01FF inclusive.

0000: 4D      -   exe signature (M)
0001: 5A      -   exe signature (Z)
0002: A8      -   bytes on last page (l.byte)
0003: 01      -   bytes on last page (h.byte)
0004: 02      -   512 byte pages in file (l.byte)
0005: 00      -   512 byte pages in file (h.byte)
0006: 01      -   relocations (l.byte)
0007: 00      -   relocations (h.byte)
0008: 20      -   paragraphs in header (l.byte)
0009: 00      -   paragraphs in header (h.byte)
000A: 00      -   minimum memory (l.byte)
000B: 00      -   minimum memory (h.byte)
000C: FF      -   maximum memory (l.byte)
000D: FF      -   maximum memory (h.byte)
000E: 00      -   SS - stack segment (l.byte)
000F: 00      -   SS - stack segment (h.byte)
0010: 00      -   SP - stack pointer (l.byte)
0011: 01      -   SP - stack pointer (h.byte)
0012: 53      -   check sum (l.byte)
0013: EB      -   check sum (h.byte)
0014: 00      -   IP - instruction pointer (l.byte)
0015: 00      -   IP - instruction pointer (h.byte)
0016: 15      -   CS - code segment (l.byte)
0017: 00      -   CS - code segment (h.byte)
0018: 1E      -   relocation table adress (l.byte)
0019: 00      -   relocation table adress (h.byte)
001A: 00      -   overlay number (l.byte)
001B: 00      -   overlay number (h.byte)
001C: 01      -   signature (l.byte)
001D: 00      -   signature (h.byte)
001E: 01      -   relocation table - offset inside segment (l.byte)
001F: 00      -   relocation table - offset inside segment (h.byte)
0020: 15      -   relocation table - segment anchor (l.byte)
0021: 00      -   relocation table - segment anchor (h.byte)
0022 to 01FF  -   reserved relocation area  (00) 




===================================================================================================
