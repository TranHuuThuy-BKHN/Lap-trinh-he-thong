EMU8086 GENERATED LISTING. MACHINE CODE <- SOURCE.
 
sum_2_number.exe -- emu8086 assembler version: 4.08  
 
[ 12/26/2019  --  3:41:35 PM ] 
 
===================================================================================================
[LINE]     LOC: MACHINE CODE                          SOURCE
===================================================================================================
 
[   1]        :                                       .model small
[   2]        :                                       ;.386
[   3]        :                                       
[   4]        :                                       .stack 100h
[   5]        :                                       
[   6]        :                                       .data
[   7]    0100: 45 6E 74 65 72 20 6E 75 6D 62 65 72   meg1 db 'Enter number 1 :$'
                20 31 3A 24                         
[   8]    0110: 0A 0D 45 6E 74 65 72 20 6E 75 6D 62   meg2 db 10, 13,'Enter number 2 :$'
                65 72 20 32 3A 24                   
[   9]    0122: 0A 0D 53 75 6D 3A 24                  meg3 db 10, 13,'Sum :$'
[  10]    0129: 00 00                                 number1 dw ?
[  11]    012B: 00 00                                 number2 dw ?
[  12]        :                                       
[  13]        :                                       .code
[  14]    0130:                                       main proc
[  15]        :                                       
[  16]    0130: B8 10 00                              mov ax, @data
[  17]    0133: 8E D8                                 mov ds, ax
[  18]        :                                       
[  19]    0135: BA 00 00                              mov dx, offset meg1; thong bao nhap so thu nhat, ket qua luu AX
[  20]    0138: B4 09                                 mov ah, 09h
[  21]    013A: CD 21                                 int 21h
[  22]        :                                       
[  23]    013C: 6A 00                                 push 0
[  24]    013E:                                       scanf1:
[  25]    013E: B4 00                                 mov ah, 0h
[  26]    0140: CD 16                                 int 16h
[  27]        :                                       
[  28]    0142: 3C 0D                                 cmp al, 13
[  29]    0144: 74 20                                 jz next1    ;enter thi ket thuc
[  30]        :                                       
[  31]        :                                       ;kiem tra la so hay khong
[  32]    0146: 3C 30                                 cmp al, 30h
[  33]    0148: 72 F4                                 jb scanf1
[  34]    014A: 3C 39                                 cmp al, 39h
[  35]    014C: 77 F0                                 ja scanf1
[  36]        :                                       
[  37]    014E: 33 D2                                 xor dx, dx
[  38]    0150: 8A D0                                 mov dl, al
[  39]    0152: 83 F2 30                              xor dx, 30h
[  40]        :                                       
[  41]        :                                       ;nhan 10 tung so trong stack
[  42]    0155: 58                                    pop ax
[  43]    0156: B7 0A                                 mov bh, 10
[  44]    0158: F6 E7                                 mul bh
[  45]        :                                       ; cong voi gia tri vua nhap
[  46]        :                                       
[  47]    015A: 03 C2                                 add ax, dx
[  48]    015C: 50                                    push ax ; day vao stack
[  49]        :                                       
[  50]        :                                       ;hien thi so vua nhap ra man hinh
[  51]    015D: 83 CA 30                              or dx, 30h
[  52]    0160: B4 02                                 mov ah, 02h
[  53]    0162: CD 21                                 int 21h
[  54]        :                                       
[  55]    0164: EB D8                                 jmp scanf1
[  56]        :                                       
[  57]    0166:                                       next1:
[  58]    0166: 8F 06 29 00                           pop number1 ; lay so thu nhat ra khoi stack
[  59]        :                                       
[  60]    016A: BA 10 00                              mov dx, offset meg2; thong bao nhap so thu hai, ket qua luu AX
[  61]    016D: B4 09                                 mov ah, 09h
[  62]    016F: CD 21                                 int 21h
[  63]        :                                       
[  64]        :                                       
[  65]    0171: 6A 00                                 push 0
[  66]    0173:                                       scanf2:
[  67]    0173: B4 00                                 mov ah, 0h
[  68]    0175: CD 16                                 int 16h
[  69]        :                                       
[  70]    0177: 3C 0D                                 cmp al, 13
[  71]    0179: 74 20                                 jz next2    ;enter thi ket thuc
[  72]        :                                       
[  73]        :                                       ;kiem tra la so hay khong
[  74]    017B: 3C 30                                 cmp al, 30h
[  75]    017D: 72 F4                                 jb scanf2
[  76]    017F: 3C 39                                 cmp al, 39h
[  77]    0181: 77 F0                                 ja scanf2
[  78]        :                                       
[  79]    0183: 33 D2                                 xor dx, dx
[  80]    0185: 8A D0                                 mov dl, al
[  81]    0187: 83 F2 30                              xor dx, 30h
[  82]        :                                       
[  83]        :                                       ;nhan 10 tung so trong stack
[  84]    018A: 58                                    pop ax
[  85]    018B: B7 0A                                 mov bh, 10
[  86]    018D: F6 E7                                 mul bh
[  87]        :                                       ; cong voi gia tri vua nhap
[  88]        :                                       
[  89]    018F: 03 C2                                 add ax, dx
[  90]    0191: 50                                    push ax ; day vao stack
[  91]        :                                       
[  92]        :                                       ;hien thi so vua nhap ra man hinh
[  93]    0192: 83 CA 30                              or dx, 30h
[  94]    0195: B4 02                                 mov ah, 02h
[  95]    0197: CD 21                                 int 21h
[  96]        :                                       
[  97]    0199: EB D8                                 jmp scanf2
[  98]    019B:                                       next2:
[  99]    019B: 8F 06 2B 00                           pop number2 ; lay so thu hai ra khoi stack
[ 100]        :                                       
[ 101]        :                                       ;hien thi thong bao in ket qua
[ 102]    019F: BA 22 00                              mov dx, offset meg3
[ 103]    01A2: B4 09                                 mov ah, 09h
[ 104]    01A4: CD 21                                 int 21h
[ 105]        :                                       
[ 106]    01A6: A1 29 00                              mov ax, number1
[ 107]    01A9: 03 06 2B 00                           add ax, number2
[ 108]        :                                       
[ 109]    01AD: 33 C9                                 xor cx, cx
[ 110]    01AF:                                       push_printf:
[ 111]    01AF: B7 0A                                 mov bh, 10
[ 112]    01B1: F6 F7                                 div bh
[ 113]        :                                       
[ 114]    01B3: 33 DB                                 xor bx, bx
[ 115]    01B5: 8A DC                                 mov bl, ah
[ 116]        :                                       ;day chu so thu duoc vao stack
[ 117]    01B7: 53                                    push bx
[ 118]        :                                       ; ax = al
[ 119]    01B8: 32 E4                                 xor ah, ah
[ 120]    01BA: 41                                    inc cx
[ 121]        :                                       
[ 122]    01BB: 0B C0                                 or ax, ax
[ 123]    01BD: 75 F0                                 jnz push_printf
[ 124]        :                                       
[ 125]    01BF:                                       printf:
[ 126]    01BF: 5A                                    pop dx
[ 127]    01C0: 83 CA 30                              or dx, 30h
[ 128]    01C3: B4 02                                 mov ah, 02h
[ 129]    01C5: CD 21                                 int 21h
[ 130]    01C7: E2 F6                                 loop printf
[ 131]    01C9: B8 00 4C CD 21                        .exit
[ 132]        :                                       
[ 133]        :                                       
[ 134]        :                                       main endp
[ 135]        :                                       end main
[ 136]        :                                       
 
===================================================================================================
 
EXE HEADER - bytes from 0000 to 01FF inclusive.

0000: 4D      -   exe signature (M)
0001: 5A      -   exe signature (Z)
0002: CE      -   bytes on last page (l.byte)
0003: 01      -   bytes on last page (h.byte)
0004: 02      -   512 byte pages in file (l.byte)
0005: 00      -   512 byte pages in file (h.byte)
0006: 01      -   relocations (l.byte)
0007: 00      -   relocations (h.byte)
0008: 20      -   paragraphs in header (l.byte)
0009: 00      -   paragraphs in header (h.byte)
000A: 00      -   minimum memory (l.byte)
000B: 00      -   minimum memory (h.byte)
000C: FF      -   maximum memory (l.byte)
000D: FF      -   maximum memory (h.byte)
000E: 00      -   SS - stack segment (l.byte)
000F: 00      -   SS - stack segment (h.byte)
0010: 00      -   SP - stack pointer (l.byte)
0011: 01      -   SP - stack pointer (h.byte)
0012: 41      -   check sum (l.byte)
0013: D6      -   check sum (h.byte)
0014: 00      -   IP - instruction pointer (l.byte)
0015: 00      -   IP - instruction pointer (h.byte)
0016: 13      -   CS - code segment (l.byte)
0017: 00      -   CS - code segment (h.byte)
0018: 1E      -   relocation table adress (l.byte)
0019: 00      -   relocation table adress (h.byte)
001A: 00      -   overlay number (l.byte)
001B: 00      -   overlay number (h.byte)
001C: 01      -   signature (l.byte)
001D: 00      -   signature (h.byte)
001E: 01      -   relocation table - offset inside segment (l.byte)
001F: 00      -   relocation table - offset inside segment (h.byte)
0020: 13      -   relocation table - segment anchor (l.byte)
0021: 00      -   relocation table - segment anchor (h.byte)
0022 to 01FF  -   reserved relocation area  (00) 




===================================================================================================
