EMU8086 GENERATED LISTING. MACHINE CODE <- SOURCE.
 
sum_array.exe -- emu8086 assembler version: 4.08  
 
[ 11/8/2019  --  9:10:02 PM ] 
 
===================================================================================================
[LINE]     LOC: MACHINE CODE                          SOURCE
===================================================================================================
 
[   1]        :                                       .model small
[   2]        :                                       ;.386
[   3]        :                                       
[   4]        :                                       .stack 100h
[   5]        :                                       .data
[   6]    0100: 01 00 04 00 05 00 06 00 08 00 64 00   array dw 1,4,5,6,8, 100
                                                    
[   7]    010C:                                       len = ($ - array)/2
[   8]        :                                       
[   9]        :                                       .code
[  10]    0110:                                       main proc
[  11]    0110: B8 10 00                              mov ax, @data
[  12]    0113: 8E D8                                 mov ds, ax
[  13]        :                                       
[  14]        :                                       
[  15]    0115: 33 F6                                 xor si, si
[  16]    0117: 33 C0                                 xor ax, ax
[  17]    0119: B9 06 00                              mov cx, len
[  18]        :                                       
[  19]        :                                       ;tinh tong cua mang, tong luu trong ax
[  20]    011C:                                       lap:
[  21]    011C: 03 04                                 add ax,array[si]
[  22]    011E: 83 C6 02                              add si,2
[  23]    0121: E2 F9                                 loop lap
[  24]        :                                       
[  25]    0123: 33 C9                                 xor cx, cx
[  26]        :                                       ;day ket qua vao stack
[  27]    0125:                                       comp:
[  28]    0125: 33 DB                                 xor bx, bx
[  29]    0127: B7 0A                                 mov bh, 10
[  30]    0129: F6 F7                                 div bh
[  31]        :                                       
[  32]    012B: 33 D2                                 xor dx, dx
[  33]    012D: 8A D4                                 mov dl, ah
[  34]    012F: 52                                    push dx
[  35]        :                                       
[  36]    0130: 32 E4                                 xor ah, ah
[  37]        :                                       
[  38]    0132: 41                                    inc cx
[  39]        :                                       
[  40]    0133: 3D 00 00                              cmp ax, 0
[  41]    0136: 77 ED                                 JA comp
[  42]        :                                       
[  43]        :                                       ;in ket qua ra man hinh
[  44]    0138:                                       print:
[  45]    0138: 33 D2                                 xor dx, dx
[  46]    013A: 5A                                    pop dx
[  47]    013B: 83 CA 30                              or dx, 30h
[  48]        :                                       
[  49]    013E: B4 02                                 mov ah, 02h
[  50]    0140: CD 21                                 int 21h
[  51]        :                                       
[  52]    0142: E2 F4                                 loop print
[  53]        :                                       
[  54]    0144: B8 00 4C CD 21                        .exit
[  55]        :                                       main endp
[  56]        :                                       end main
[  57]        :                                       
 
===================================================================================================
 
EXE HEADER - bytes from 0000 to 01FF inclusive.

0000: 4D      -   exe signature (M)
0001: 5A      -   exe signature (Z)
0002: 49      -   bytes on last page (l.byte)
0003: 01      -   bytes on last page (h.byte)
0004: 02      -   512 byte pages in file (l.byte)
0005: 00      -   512 byte pages in file (h.byte)
0006: 01      -   relocations (l.byte)
0007: 00      -   relocations (h.byte)
0008: 20      -   paragraphs in header (l.byte)
0009: 00      -   paragraphs in header (h.byte)
000A: 00      -   minimum memory (l.byte)
000B: 00      -   minimum memory (h.byte)
000C: FF      -   maximum memory (l.byte)
000D: FF      -   maximum memory (h.byte)
000E: 00      -   SS - stack segment (l.byte)
000F: 00      -   SS - stack segment (h.byte)
0010: 00      -   SP - stack pointer (l.byte)
0011: 01      -   SP - stack pointer (h.byte)
0012: A8      -   check sum (l.byte)
0013: 67      -   check sum (h.byte)
0014: 00      -   IP - instruction pointer (l.byte)
0015: 00      -   IP - instruction pointer (h.byte)
0016: 11      -   CS - code segment (l.byte)
0017: 00      -   CS - code segment (h.byte)
0018: 1E      -   relocation table adress (l.byte)
0019: 00      -   relocation table adress (h.byte)
001A: 00      -   overlay number (l.byte)
001B: 00      -   overlay number (h.byte)
001C: 01      -   signature (l.byte)
001D: 00      -   signature (h.byte)
001E: 01      -   relocation table - offset inside segment (l.byte)
001F: 00      -   relocation table - offset inside segment (h.byte)
0020: 11      -   relocation table - segment anchor (l.byte)
0021: 00      -   relocation table - segment anchor (h.byte)
0022 to 01FF  -   reserved relocation area  (00) 




===================================================================================================
