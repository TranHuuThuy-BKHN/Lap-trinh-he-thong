EMU8086 GENERATED LISTING. MACHINE CODE <- SOURCE.
 
upper_string.exe -- emu8086 assembler version: 4.08  
 
[ 11/11/2019  --  10:47:42 AM ] 
 
===================================================================================================
[LINE]     LOC: MACHINE CODE                          SOURCE
===================================================================================================
 
[   1]        :                                       .model small
[   2]        :                                       ;.386
[   3]        :                                       .stack 100h
[   4]        :                                       
[   5]        :                                       .data
[   6]    0100: 45 6E 74 65 72 20 6C 6F 77 65 72 20   meg db 'Enter lower characters :$'
                63 68 61 72 61 63 74 65 72 73 3A 24 
                                                    
[   7]    0118: 0A 0D 55 70 70 65 72 3A 24            meg2 db 10, 13, 'Upper :$'
[   8]        :                                       
[   9]    0121: 24 24 24 24 24 24 24 24 24 24 24 24   upper_string db 20 dup('$')
                24 24 24 24 24 24 24 24             
[  10]        :                                       .code
[  11]    0140:                                       main proc
[  12]    0140: B8 10 00                              mov ax, @data
[  13]    0143: 8E D8                                 mov ds, ax
[  14]        :                                       
[  15]        :                                       ;hien thi thong bao nhap chuoi ki tu
[  16]    0145: BA 00 00                              mov dx, offset meg
[  17]    0148: B4 09                                 mov ah, 09h
[  18]    014A: CD 21                                 int 21h
[  19]        :                                       
[  20]    014C: 33 F6                                 xor si, si
[  21]        :                                       ;nhap chuoi ki tu thuong cho den khi nhao vao enter
[  22]    014E:                                       lap:
[  23]    014E: B4 00                                 mov ah, 0h
[  24]    0150: CD 16                                 int 16h
[  25]        :                                       
[  26]    0152: 3C 0D                                 cmp al, 13
[  27]    0154: 74 23                                 jz next
[  28]        :                                       
[  29]    0156: 3C 20                                 cmp al, 32
[  30]    0158: 74 0A                                 jz store
[  31]        :                                       
[  32]    015A: 3C 61                                 cmp al, 97
[  33]    015C: 72 F0                                 jb lap
[  34]        :                                       
[  35]    015E: 3C 7B                                 cmp al, 123
[  36]    0160: 77 EC                                 ja lap
[  37]        :                                       
[  38]    0162: 34 20                                 xor al, 20h; chuyen thanh chu hoa
[  39]        :                                       
[  40]    0164:                                       store:
[  41]    0164: 33 D2                                 xor dx, dx
[  42]    0166: 8A D0                                 mov dl, al
[  43]        :                                       
[  44]    0168: 88 44 21                              mov upper_string[si], al
[  45]        :                                       
[  46]    016B: 3C 20                                 cmp al, 32
[  47]    016D: 74 03                                 jz print
[  48]    016F: 80 CA 20                              or dl, 20h
[  49]    0172:                                       print:
[  50]    0172: 46                                    inc si
[  51]    0173: B4 02                                 mov ah, 02h
[  52]    0175: CD 21                                 int 21h
[  53]        :                                       
[  54]    0177: EB D5                                 jmp lap
[  55]        :                                       
[  56]    0179:                                       next:
[  57]    0179: BA 18 00                              mov dx, offset meg2
[  58]    017C: B4 09                                 mov ah, 09h
[  59]    017E: CD 21                                 int 21h
[  60]        :                                       
[  61]    0180: BA 21 00                              mov dx, offset upper_string
[  62]    0183: B4 09                                 mov ah, 09h
[  63]    0185: CD 21                                 int 21h
[  64]    0187: B8 00 4C CD 21                        .exit
[  65]        :                                       
[  66]        :                                       main endp
[  67]        :                                       
[  68]        :                                       end main
[  69]        :                                       
 
===================================================================================================
 
EXE HEADER - bytes from 0000 to 01FF inclusive.

0000: 4D      -   exe signature (M)
0001: 5A      -   exe signature (Z)
0002: 8C      -   bytes on last page (l.byte)
0003: 01      -   bytes on last page (h.byte)
0004: 02      -   512 byte pages in file (l.byte)
0005: 00      -   512 byte pages in file (h.byte)
0006: 01      -   relocations (l.byte)
0007: 00      -   relocations (h.byte)
0008: 20      -   paragraphs in header (l.byte)
0009: 00      -   paragraphs in header (h.byte)
000A: 00      -   minimum memory (l.byte)
000B: 00      -   minimum memory (h.byte)
000C: FF      -   maximum memory (l.byte)
000D: FF      -   maximum memory (h.byte)
000E: 00      -   SS - stack segment (l.byte)
000F: 00      -   SS - stack segment (h.byte)
0010: 00      -   SP - stack pointer (l.byte)
0011: 01      -   SP - stack pointer (h.byte)
0012: 95      -   check sum (l.byte)
0013: B1      -   check sum (h.byte)
0014: 00      -   IP - instruction pointer (l.byte)
0015: 00      -   IP - instruction pointer (h.byte)
0016: 14      -   CS - code segment (l.byte)
0017: 00      -   CS - code segment (h.byte)
0018: 1E      -   relocation table adress (l.byte)
0019: 00      -   relocation table adress (h.byte)
001A: 00      -   overlay number (l.byte)
001B: 00      -   overlay number (h.byte)
001C: 01      -   signature (l.byte)
001D: 00      -   signature (h.byte)
001E: 01      -   relocation table - offset inside segment (l.byte)
001F: 00      -   relocation table - offset inside segment (h.byte)
0020: 14      -   relocation table - segment anchor (l.byte)
0021: 00      -   relocation table - segment anchor (h.byte)
0022 to 01FF  -   reserved relocation area  (00) 




===================================================================================================
